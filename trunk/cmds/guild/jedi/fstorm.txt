// Last edited by deforce on 12-15-2007
inherit CMD;
inherit M_EXIT;

int get_floor();
int get_ceiling();
string format_time_left(int time);
void storm_room(object room, int floor, int ceiling, int rounds);
void concentration(object room);
void damage_everything(object room, int damage);

private mapping translations = ([ "n" : "north", "s" : "south", "e" : "east", "w" : "west", "ne" : "northeast", "nw" : "northwest", "se" : "southeast", "sw" : "southwest", "u" : "up", "d" : "down" ]);
object this_body;

void main(string arg)
{
   this_body = this_body();

   if (!arg)
   {
      out("Create a Force storm where?\n");

      return;
   }

   if (this_body->query_guild_level("jedi"))
   {
      if (this_body->query_skill("lightning") < 1000)
      {
         write("You are not experienced enough to know how to create Force storms.\n");
      }
      else if (this_body->has_skill_delay())
      {
         out("You are too busy to concentrate on manipulating the Force.\n");
      }
      else if (this_body->has_special_skill_delay("force storm"))
      {
         write("You need to wait " + format_time_left(this_body->has_special_skill_delay("force storm")) + " before you can create another Force storm.\n");
      }
      else
      {
         object room;

         if (translations[arg]) { arg = translations[arg]; }

         if (member_array(arg, environment(this_body)->query_exit_directions(0)) == -1)
         {
            out("You don't see a room in that direction.\n");
            return;
         }

         room = load_object(environment(this_body)->query_exit_destination(arg));

         if (room)
         {
            int alignment = this_body->query_jedi_alignment();
            int max_alignment = this_body->query_max_jedi_alignment();

            this_body->simple_action("$N $vconcentrate on creating a Force storm in " + room->short() + "...\n");

            this_body->adjust_jedi_alignment(alignment < 0 ? -10 : (max_alignment - 1) * -1);

            call_out("concentration", 8, room);

            this_body->add_skill_delay(12);
         }
         else { out("You don't see a room in that direction.\n"); }
      }
   }
   else
   {
      out("Only Jedi know how to manipulate the Force.\n");
   }
}

string format_time_left(int time)
{
   string output = "";

   if (time > 59)
   {
      if ((time / 60) > 0) { output += (time / 60) + " minute" + ((time / 60) != 1 ? "s" : "") + ", "; }
   }

   output += (time % 60) + " second" + ((time % 60) != 1 ? "s" : "");

   return output;
}

int get_floor()
{
   float force = this_body->query_for();
   float level = this_body->query_guild_level("jedi");
   int amount = floor((level / 2.0) * (force / 100.0));

   return (amount > 0 ? amount : 1);
}

int get_ceiling()
{
   float force = this_body->query_for();
   float level = this_body->query_guild_level("jedi");
   int amount = floor((level * 1.5) * (force / 100.0));

   return (amount > 0 ? amount : 1);
}

void concentration(object room)
{
   int alignment = this_body->query_jedi_alignment();

   if (this_body->test_skill("lightning", alignment * (alignment < 0 ? -5 : -50)))
   {
      int rounds = floor(this_body->query_guild_level("jedi") / 10.0);

//      this_body->simple_action("$N $vcreate a Force storm in " + room->short() + ", with " + get_floor() + " min and " + get_ceiling() + " max damage, lasting " + (rounds > 0 ? rounds : 1) + " rounds.\n");

      storm_room(room, get_floor(), get_ceiling(), (rounds > 0 ? rounds : 1));
   }
   else
   {
      this_body->simple_action("$N $vlose focus.\n");
      this_body->stun(8);
   }
}

void storm_room(object room, int floor, int ceiling, int rounds)
{
   string nearby_message;
   int amount = floor + random(ceiling - floor + 1);

   if (rounds > 1)
   {
      nearby_message = "A Force storm rages nearby.\n";

      call_out("storm_room", 8, room, floor, ceiling, rounds - 1);
   }
   else
   {
      nearby_message = "A Force storm rages nearby, and subsides.\n";
   }

   tell_from_outside(room, "A Force storm rages throughout the area!\n");

   foreach (string exit in room->query_exit_directions(0))
   {
      tell_from_outside(room->query_exit_destination(exit), nearby_message);
   }

   damage_everything(room, amount);

   if (rounds == 1) { tell_from_outside(room, "The Force storm subsides.\n"); }
}

void damage_everything(object room, int damage)
{
   foreach (object thing in all_inventory(room))
   {
      if (thing->is_adversary())
      {
         thing->my_action("$N $vget blasted with wind, hail, and lightning.\n");
         thing->other_action("$N $vscream in agony.\n");

         thing->hurt_us(damage, "random");
      }
   }
}