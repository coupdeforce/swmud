// Last edited by deforce on 07-12-2008
inherit CMD;

void perform_enhance_attribute(string attribute);
void meditation_time(string attribute);
string format_time_left(int time);
string get_stat_name(string stat);
string get_stat_full_name(string stat);

void main(string attribute)
{
   object this_body = this_body();

   if (!attribute)
   {
      write("Enhance which attribute?\n");

      return;
   }

   if (!this_body->query_guild_level("jedi"))
   {
      write("Only Jedi know how to use the Force to enhance their attributes.\n");
   }
   else if (!this_body->has_learned_skill("enhance attributes"))
   {
      write("You have not learned how to enhance your attributes with the Force.\n");
   }
   else if (this_body->get_target())
   {
      write("You are unable to concentrate on enhancing your attributes while in combat.\n");
   }
   else if (this_body->has_skill_delay())
   {
      write("You are too busy to concentrate on enhancing your attributes.\n");
   }
   else if (this_body->has_special_skill_delay("enhance attribute"))
   {
      write("You need to wait " + format_time_left(this_body->has_special_skill_delay("enhance attribute")) + " before you can enhance your attributes again.\n");
   }
   else if (!get_stat_name(attribute))
   {
      write("You have no " + attribute + " to enhance.\n");
   }
   else
   {
      this_body->simple_action("$N $vconcentrate on enhancing $p body with the Force...\n");

      call_out("meditation_time", 4, attribute);

      this_body->add_skill_delay(8);

      this_body->stun(2);
   }
}

void perform_enhance_attribute(string attribute)
{
   object this_body = this_body();
   string stat_name = get_stat_name(attribute);
   float force = this_body->query_for();
   float level = this_body->query_guild_level("jedi");
   int rank = to_int(floor(this_body->query_skill("enhatt") / 100.0));
   int amount = to_int(floor((level / 50.0) * (force / 100.0) * (rank * 3.0)));
   int delay = 300 - to_int(floor(((level * 2.0) + force) / 50.0) * 30.0);
   int duration = 10 + (rank * 5) + to_int(floor((level / 50.0) * (force / 100.0) * (10.0 + (rank * 5.0))) * 2.0);

   if (amount < 1) { amount = 1; }

   load_object("/d/buffs/enhatt");
   this_body->add_buff(new("/d/buffs/enhatt", attribute, amount, duration));

   this_body->add_special_skill_delay("enhance attribute", delay);
}

void meditation_time(string attribute)
{
   object this_body = this_body();
   int alignment = this_body->query_jedi_alignment();

   if (!this_body) { return; }

   if (this_body->test_skill("enhatt", alignment * (alignment < 0 ? -2 : 2)))
   {
      perform_enhance_attribute(attribute);
   }
   else
   {
      this_body->simple_action("$N $vlose focus.\n");

      if (this_body->query_int() < random(100))
      {
         this_body->stun(2);
      }
   }
}

string format_time_left(int time)
{
   string output = "";

   if (time > 59)
   {
      if ((time / 60) > 0) { output += (time / 60) + " minute" + ((time / 60) != 1 ? "s" : "") + ", "; }
   }

   output += (time % 60) + " second" + ((time % 60) != 1 ? "s" : "");

   return output;
}

string get_stat_name(string stat)
{
   switch(lower_case(stat))
   {
      case "strength":
      case "str":
         return "str";
      case "constitution":
      case "con":
         return "con";
      case "agility":
      case "agi":
         return "agi";
      case "dexterity":
      case "dex":
         return "dex";
      case "perception":
      case "per":
         return "per";
      case "intelligence":
      case "int":
         return "int";
      case "charisma":
      case "cha":
         return "cha";
      case "luck":
      case "luc":
         return "luc";
      case "force":
      case "for":
         return "for";
   }

   return 0;
}