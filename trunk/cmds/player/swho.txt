// Last editied by deforce on 05-29-2008
#include <playerflags.h>

inherit CMD;
inherit M_ANSI;

#include <guild_colors.h>

#define USER_WIDTH 26
#define WIDTH this_user()->query_screen_width()
#define DELIM (repeat_string("=", (WIDTH - 1)) + "\n")

string format_idle_time(object body);
string format_status(string user);
string show_location(string line, object body);
int sort_level_name(string first, string second);

void main()
{
   string output = "";
   string array users_player = sort_array(bodies()->query_userid(), 1);
   string array users_wizard;

   users_wizard = filter_array(users_player, (: wizardp($1) :));
   users_player = filter_array(users_player, (: !wizardp($1) :));

   out("\n\n%^CYAN%^" + colour_center(ctime(time()) + "   -   " + implode(explode(upper_case(mud_name()), ""), " ") + "   -   " + sizeof(bodies()) + " adventurers%^RESET%^\n"));
   out(DELIM);

   for (int count = 0; count < sizeof(users_wizard); count++)
   {
      object body = find_body(users_wizard[count]);
      int wizard_level = SECURE_D->query_is_wizard(users_wizard[count]);

      users_wizard[count] = sprintf("%02d", wizard_level) + ":::" + users_wizard[count];
   }

   users_wizard = sort_array(users_wizard, "sort_level_name");

   for (int count = 0; count < sizeof(users_wizard); count++)
   {
      string array name = explode(users_wizard[count], ":::");

      users_wizard[count] = name[1];
   }

   foreach (string user in users_wizard)
   {
      object body = find_body(user);

      if (body && (body->is_visible() || wizardp(this_body())))
      {
         int wizard_level = SECURE_D->query_is_wizard(user);
         string line = "%^BOLD%^[";

         if (wizard_level > 3) { line += "Grand Moff"; }
         else if (wizard_level > 2) { line += "Moff"; }
         else if (wizard_level > 1) { line += "Officer"; }
         else if (wizard_level > 0) { line += "Cadet"; }

         line += "] " + format_status(user);

         out(show_location(line, body) + "\n");
      }
   }

   if (sizeof(users_player) && sizeof(users_wizard))
   {
      out(DELIM);
   }

   for (int count = 0; count < sizeof(users_player); count++)
   {
      object body = find_body(users_player[count]);
      int primary_level = body->query_primary_level();

      users_player[count] = sprintf("%02d", primary_level) + ":::" + users_player[count];
   }

   users_player = sort_array(users_player, "sort_level_name");

   for (int count = 0; count < sizeof(users_player); count++)
   {
      string array name = explode(users_player[count], ":::");

      users_player[count] = name[1];
   }

   if (sizeof(users_player))
   {
      string array lines = ({ });

      foreach (string user in users_player)
      {
         string line = get_guild_color(find_body(user)->query_primary_guild());
         line += format_status(user);

         lines += ({ line });
      }

      outf("%#-" + WIDTH + ".0s\n\n", implode(lines, "\n"));
   }
}

int sort_level_name(string first, string second)
{
   int first_level = to_int(first[0..1]);
   int second_level = to_int(second[0..1]);
   first = first[2..];
   second = second[2..];

   if (first_level < second_level) { return 1; }
   else if (first_level > second_level) { return -1; }

   return strcmp(first, second);
}

string format_idle_time(object body)
{
   int time = query_idle(body->query_link());
   string output = "";

   if (time > 59)
   {
      output += " (";

      if (time > 3599)
      {
         if (time > 86399)
         {
            output += (time / 86400) + "d, ";

            time = time % 86400;
         }

         output += (time / 3600) + "h, ";

         time = time % 3600;
      }

      output += (time / 60) + "m";

      if (wizardp(this_user()) && wizardp(body) && (time > 0)) { output += ", " + (time % 60) + "s"; }

      output += ")";
   }
   else if (wizardp(this_user()) && (time > 0)) { output += " (" + (time % 60) + "s)"; }

   return output;
}

string format_status(string user)
{
   object body = find_body(user);
   string output = "";

   if (!wizardp(body)) { output += sprintf("[%2i] ", body->query_primary_level()); }

   if (body->test_flag(F_IN_EDIT)) { output += (wizardp(user) ? "** " : "*"); }
   output += (!body->is_visible() ? "(" : "");
   if (!wizardp(body) && body->test_flag(F_INACTIVE)) { output += "["; }

   output += capitalize(user);

   if (!wizardp(body) && body->test_flag(F_INACTIVE)) { output += "]"; }
   output += (!body->is_visible() ? ")" : "");
   if (body->test_flag(F_IN_EDIT)) { output += (wizardp(user) ? " **" : "*"); }

   output += "%^RESET%^" + (wizardp(user) && body->test_flag(F_INACTIVE) ? " (away)" : format_idle_time(body));

   return output;
}

string show_location(string line, object body)
{
   if (wizardp(this_user()))
   {
      string room_desc = (environment(body) ? environment(body)->get_brief() : "(Nowhere)");
      int free_space = WIDTH - colour_strlen(line) - 7;

      if (colour_strlen(room_desc) < free_space)
      {
         line += repeat_string(" ", (free_space + 4 - colour_strlen(room_desc)));
         line += " " + room_desc;
      }
      else
      {
         room_desc = room_desc[0..(free_space - 4)];

         if (colour_strlen(room_desc) > (free_space - 3))
         {
            room_desc = colour_truncate(room_desc, (free_space - 3));
         }

         line += repeat_string(" ", (free_space + 1 - colour_strlen(room_desc)));
         line += " " + room_desc + "...";
      }
   }

   return line;
}